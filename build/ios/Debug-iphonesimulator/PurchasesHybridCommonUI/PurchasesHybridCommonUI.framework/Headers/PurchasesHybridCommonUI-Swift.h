#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef PURCHASESHYBRIDCOMMONUI_SWIFT_H
#define PURCHASESHYBRIDCOMMONUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import RevenueCatUI;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PurchasesHybridCommonUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@protocol RCCustomerCenterViewControllerDelegateWrapper;
SWIFT_CLASS("_TtC23PurchasesHybridCommonUI19CustomerCenterProxy") SWIFT_AVAILABILITY(visionos,unavailable) SWIFT_AVAILABILITY(watchos,unavailable) SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(macos,unavailable) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface CustomerCenterProxy : NSObject
/// See <code>CustomerCenterViewControllerDelegateWrapper</code> for receiving events.
@property (nonatomic, weak) id <RCCustomerCenterViewControllerDelegateWrapper> _Nullable delegate;
/// Whether to show the close button in the navigation
@property (nonatomic) BOOL shouldShowCloseButton;
- (void)presentWithResultHandler:(void (^ _Nonnull)(void))resultHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CustomerCenterUIViewController;
@class NSString;
/// Delegate for <code>CustomerCenterUIViewController</code> that sends dictionaries instead of the original objects.
SWIFT_PROTOCOL_NAMED("CustomerCenterViewControllerDelegateWrapper") SWIFT_AVAILABILITY(visionos,unavailable) SWIFT_AVAILABILITY(watchos,unavailable) SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(macos,unavailable) SWIFT_AVAILABILITY(ios,introduced=15.0)
@protocol RCCustomerCenterViewControllerDelegateWrapper
@optional
/// Notifies that a restore operation has started in the Customer Center.
- (void)customerCenterViewControllerDidStartRestore:(CustomerCenterUIViewController * _Nonnull)controller;
/// Notifies that a restore operation has completed successfully in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didFinishRestoringWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary;
/// Notifies that a restore operation has failed in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didFailRestoringWithErrorDictionary:(NSDictionary<NSString *, id> * _Nonnull)errorDictionary;
/// Notifies that the user is navigating to manage subscriptions in the Customer Center.
- (void)customerCenterViewControllerDidShowManageSubscriptions:(CustomerCenterUIViewController * _Nonnull)controller;
/// Notifies that a refund request has started in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didStartRefundRequestForProductWithID:(NSString * _Nonnull)productID;
/// Notifies that a refund request has completed in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didCompleteRefundRequestForProductWithID:(NSString * _Nonnull)productId withStatus:(NSString * _Nonnull)status;
/// Notifies that a feedback survey has been completed in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didCompleteFeedbackSurveyWithOptionID:(NSString * _Nonnull)optionID;
/// Notifies that a management option has been selected in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didSelectCustomerCenterManagementOption:(NSString * _Nonnull)optionID withURL:(NSString * _Nullable)url;
/// Notifies that a custom action has been selected in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didSelectCustomAction:(NSString * _Nonnull)actionID withPurchaseIdentifier:(NSString * _Nullable)purchaseIdentifier;
/// Notifies that the <code>CustomerCenterUIViewController</code> was dismissed.
- (void)customerCenterViewControllerWasDismissed:(CustomerCenterUIViewController * _Nonnull)controller;
@end

SWIFT_AVAILABILITY(visionos,unavailable) SWIFT_AVAILABILITY(watchos,unavailable) SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(macos,unavailable) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface CustomerCenterProxy (SWIFT_EXTENSION(PurchasesHybridCommonUI)) <RCCustomerCenterViewControllerDelegateWrapper>
- (void)customerCenterViewControllerWasDismissed:(CustomerCenterUIViewController * _Nonnull)controller;
- (void)customerCenterViewControllerDidStartRestore:(CustomerCenterUIViewController * _Nonnull)controller;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didFinishRestoringWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didFailRestoringWithErrorDictionary:(NSDictionary<NSString *, id> * _Nonnull)errorDictionary;
- (void)customerCenterViewControllerDidShowManageSubscriptions:(CustomerCenterUIViewController * _Nonnull)controller;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didStartRefundRequestForProductWithID:(NSString * _Nonnull)productID;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didCompleteRefundRequestForProductWithID:(NSString * _Nonnull)productId withStatus:(NSString * _Nonnull)status;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didSelectCustomerCenterManagementOption:(NSString * _Nonnull)optionID withURL:(NSString * _Nullable)url;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didCompleteFeedbackSurveyWithOptionID:(NSString * _Nonnull)optionID;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didSelectCustomAction:(NSString * _Nonnull)actionID withPurchaseIdentifier:(NSString * _Nullable)purchaseIdentifier;
@end

@class NSCoder;
@class NSBundle;
SWIFT_CLASS("_TtC23PurchasesHybridCommonUI30CustomerCenterUIViewController") SWIFT_AVAILABILITY(visionos,unavailable) SWIFT_AVAILABILITY(watchos,unavailable) SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(macos,unavailable) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface CustomerCenterUIViewController : UIViewController
/// See <code>CustomerCenterViewControllerDelegateWrapper</code> for receiving events.
@property (nonatomic, weak) id <RCCustomerCenterViewControllerDelegateWrapper> _Nullable delegate;
/// Handler for when the navigation close button is tapped
@property (nonatomic, copy) void (^ _Nullable onCloseHandler)(void);
/// Whether to show the close button in the navigation
@property (nonatomic) BOOL shouldShowCloseButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidDisappear:(BOOL)animated;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol RCPaywallViewControllerDelegateWrapper;
@class RCPaywallViewController;
@class RCPaywallFooterViewController;
SWIFT_CLASS("_TtC23PurchasesHybridCommonUI12PaywallProxy") SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface PaywallProxy : NSObject
/// See <code>PaywallViewControllerDelegateWrapper</code> for receiving events.
@property (nonatomic, weak) id <RCPaywallViewControllerDelegateWrapper> _Nullable delegate;
- (RCPaywallViewController * _Nonnull)createPaywallView SWIFT_WARN_UNUSED_RESULT;
- (RCPaywallViewController * _Nonnull)createPaywallViewWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier presentedOfferingContext:(NSDictionary<NSString *, id> * _Nonnull)presentedOfferingContext SWIFT_WARN_UNUSED_RESULT;
- (RCPaywallFooterViewController * _Nonnull)createFooterPaywallView SWIFT_WARN_UNUSED_RESULT;
- (RCPaywallFooterViewController * _Nonnull)createFooterPaywallViewWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier presentedOfferingContext:(NSDictionary<NSString *, id> * _Nonnull)presentedOfferingContext SWIFT_WARN_UNUSED_RESULT;
- (void)presentPaywallWithOptions:(NSDictionary<NSString *, id> * _Nonnull)options paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler;
- (void)presentPaywallIfNeededWithOptions:(NSDictionary<NSString *, id> * _Nonnull)options paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtCC23PurchasesHybridCommonUI12PaywallProxy18PaywallOptionsKeys")
@interface PaywallOptionsKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requiredEntitlementIdentifier;)
+ (NSString * _Nonnull)requiredEntitlementIdentifier SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offeringIdentifier;)
+ (NSString * _Nonnull)offeringIdentifier SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull presentedOfferingContext;)
+ (NSString * _Nonnull)presentedOfferingContext SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull displayCloseButton;)
+ (NSString * _Nonnull)displayCloseButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull shouldBlockTouchEvents;)
+ (NSString * _Nonnull)shouldBlockTouchEvents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fontName;)
+ (NSString * _Nonnull)fontName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtCC23PurchasesHybridCommonUI12PaywallProxy28PresentedOfferingContextKeys")
@interface PresentedOfferingContextKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offeringIdentifier;)
+ (NSString * _Nonnull)offeringIdentifier SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull placementIdentifier;)
+ (NSString * _Nonnull)placementIdentifier SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull targetingContext;)
+ (NSString * _Nonnull)targetingContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtCC23PurchasesHybridCommonUI12PaywallProxy37PresentedOfferingTargetingContextKeys")
@interface PresentedOfferingTargetingContextKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull revision;)
+ (NSString * _Nonnull)revision SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ruleId;)
+ (NSString * _Nonnull)ruleId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RCPackage;
@class RCCustomerInfo;
@class RCStoreTransaction;
@class NSError;
SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface PaywallProxy (SWIFT_EXTENSION(PurchasesHybridCommonUI)) <RCPaywallViewControllerDelegate>
- (void)paywallViewControllerDidStartPurchase:(RCPaywallViewController * _Nonnull)controller;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didStartPurchaseWithPackage:(RCPackage * _Nonnull)package;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishPurchasingWithCustomerInfo:(RCCustomerInfo * _Nonnull)customerInfo;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishPurchasingWithCustomerInfo:(RCCustomerInfo * _Nonnull)customerInfo transaction:(RCStoreTransaction * _Nullable)transaction;
- (void)paywallViewControllerDidCancelPurchase:(RCPaywallViewController * _Nonnull)controller;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFailPurchasingWithError:(NSError * _Nonnull)error;
- (void)paywallViewControllerDidStartRestore:(RCPaywallViewController * _Nonnull)controller;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishRestoringWithCustomerInfo:(RCCustomerInfo * _Nonnull)customerInfo;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFailRestoringWithError:(NSError * _Nonnull)error;
- (void)paywallViewControllerWasDismissed:(RCPaywallViewController * _Nonnull)controller;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didChangeSizeTo:(CGSize)size;
@end

@class RCOffering;
SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface PaywallProxy (SWIFT_EXTENSION(PurchasesHybridCommonUI))
- (RCPaywallViewController * _Nonnull)createPaywallViewWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use init with offeringIdentifier:presentedOfferingContext instead");
- (RCPaywallFooterViewController * _Nonnull)createFooterPaywallViewWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use init with offeringIdentifier:presentedOfferingContext instead");
- (void)presentPaywall SWIFT_DEPRECATED_MSG("Use presentPaywall with paywallResultHandler instead");
- (void)presentPaywallWithDisplayCloseButton:(BOOL)displayCloseButton SWIFT_DEPRECATED_MSG("Use presentPaywall with paywallResultHandler instead");
- (void)presentPaywallWithOffering:(RCOffering * _Nonnull)offering SWIFT_DEPRECATED_MSG("Use presentPaywall with paywallResultHandler instead");
- (void)presentPaywallWithOffering:(RCOffering * _Nonnull)offering displayCloseButton:(BOOL)displayCloseButton SWIFT_DEPRECATED_MSG("Use presentPaywall with paywallResultHandler instead");
- (void)presentPaywallWithPaywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallWithDisplayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallWithOffering:(RCOffering * _Nonnull)offering paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallWithOffering:(RCOffering * _Nonnull)offering displayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier displayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with paywallResultHandler instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier displayCloseButton:(BOOL)displayCloseButton SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with paywallResultHandler instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with options instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier displayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with options instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier offeringIdentifier:(NSString * _Nonnull)offeringIdentifier displayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with options instead");
@end

/// Delegate for <code>PaywallViewController</code> that sends dictionaries instead of the original objects.
SWIFT_PROTOCOL_NAMED("PaywallViewControllerDelegateWrapper") SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@protocol RCPaywallViewControllerDelegateWrapper
@optional
/// Notifies that a purchase has started in a <code>PaywallViewController</code>.
- (void)paywallViewControllerDidStartPurchase:(RCPaywallViewController * _Nonnull)controller;
/// Notifies that a purchase has started in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didStartPurchaseWithPackage:(NSDictionary<NSString *, id> * _Nonnull)packageDictionary;
/// Notifies that a purchase has completed in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishPurchasingWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary;
/// Notifies that a purchase has completed in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishPurchasingWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary transactionDictionary:(NSDictionary<NSString *, id> * _Nullable)transactionDictionary;
/// Notifies that a purchase has been cancelled in a <code>PaywallViewController</code>.
- (void)paywallViewControllerDidCancelPurchase:(RCPaywallViewController * _Nonnull)controller;
/// Notifies that the purchase operation has failed in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFailPurchasingWithErrorDictionary:(NSDictionary<NSString *, id> * _Nonnull)errorDictionary;
/// Notifies that a restore has started in a <code>PaywallViewController</code>.
- (void)paywallViewControllerDidStartRestore:(RCPaywallViewController * _Nonnull)controller;
/// Notifies that the restore operation has completed in a <code>PaywallViewController</code>.
/// warning:
/// Receiving a <code>CustomerInfo</code>does not imply that the user has any entitlements,
/// simply that the process was successful. You must verify the <code>CustomerInfo/entitlements</code>
/// to confirm that they are active.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishRestoringWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary;
/// Notifies that the restore operation has failed in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFailRestoringWithErrorDictionary:(NSDictionary<NSString *, id> * _Nonnull)errorDictionary;
/// Notifies that the <code>PaywallViewController</code> has to be dismissed.
/// <ul>
///   <li>
///     After close button is pressed if it’s present
///   </li>
///   <li>
///     After a successful purchase
///     Only called if the shouldAutomaticallyDismiss configuration option is set to false (true by default).
///   </li>
/// </ul>
- (void)paywallViewControllerRequestedDismissal:(RCPaywallViewController * _Nonnull)controller;
/// Notifies that the <code>PaywallViewController</code> was dismissed.
- (void)paywallViewControllerWasDismissed:(RCPaywallViewController * _Nonnull)controller;
/// For internal use only.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didChangeSizeTo:(CGSize)size;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef PURCHASESHYBRIDCOMMONUI_SWIFT_H
#define PURCHASESHYBRIDCOMMONUI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import RevenueCatUI;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PurchasesHybridCommonUI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@protocol RCCustomerCenterViewControllerDelegateWrapper;
SWIFT_CLASS("_TtC23PurchasesHybridCommonUI19CustomerCenterProxy") SWIFT_AVAILABILITY(visionos,unavailable) SWIFT_AVAILABILITY(watchos,unavailable) SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(macos,unavailable) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface CustomerCenterProxy : NSObject
/// See <code>CustomerCenterViewControllerDelegateWrapper</code> for receiving events.
@property (nonatomic, weak) id <RCCustomerCenterViewControllerDelegateWrapper> _Nullable delegate;
/// Whether to show the close button in the navigation
@property (nonatomic) BOOL shouldShowCloseButton;
- (void)presentWithResultHandler:(void (^ _Nonnull)(void))resultHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CustomerCenterUIViewController;
@class NSString;
/// Delegate for <code>CustomerCenterUIViewController</code> that sends dictionaries instead of the original objects.
SWIFT_PROTOCOL_NAMED("CustomerCenterViewControllerDelegateWrapper") SWIFT_AVAILABILITY(visionos,unavailable) SWIFT_AVAILABILITY(watchos,unavailable) SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(macos,unavailable) SWIFT_AVAILABILITY(ios,introduced=15.0)
@protocol RCCustomerCenterViewControllerDelegateWrapper
@optional
/// Notifies that a restore operation has started in the Customer Center.
- (void)customerCenterViewControllerDidStartRestore:(CustomerCenterUIViewController * _Nonnull)controller;
/// Notifies that a restore operation has completed successfully in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didFinishRestoringWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary;
/// Notifies that a restore operation has failed in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didFailRestoringWithErrorDictionary:(NSDictionary<NSString *, id> * _Nonnull)errorDictionary;
/// Notifies that the user is navigating to manage subscriptions in the Customer Center.
- (void)customerCenterViewControllerDidShowManageSubscriptions:(CustomerCenterUIViewController * _Nonnull)controller;
/// Notifies that a refund request has started in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didStartRefundRequestForProductWithID:(NSString * _Nonnull)productID;
/// Notifies that a refund request has completed in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didCompleteRefundRequestForProductWithID:(NSString * _Nonnull)productId withStatus:(NSString * _Nonnull)status;
/// Notifies that a feedback survey has been completed in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didCompleteFeedbackSurveyWithOptionID:(NSString * _Nonnull)optionID;
/// Notifies that a management option has been selected in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didSelectCustomerCenterManagementOption:(NSString * _Nonnull)optionID withURL:(NSString * _Nullable)url;
/// Notifies that a custom action has been selected in the Customer Center.
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didSelectCustomAction:(NSString * _Nonnull)actionID withPurchaseIdentifier:(NSString * _Nullable)purchaseIdentifier;
/// Notifies that the <code>CustomerCenterUIViewController</code> was dismissed.
- (void)customerCenterViewControllerWasDismissed:(CustomerCenterUIViewController * _Nonnull)controller;
@end

SWIFT_AVAILABILITY(visionos,unavailable) SWIFT_AVAILABILITY(watchos,unavailable) SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(macos,unavailable) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface CustomerCenterProxy (SWIFT_EXTENSION(PurchasesHybridCommonUI)) <RCCustomerCenterViewControllerDelegateWrapper>
- (void)customerCenterViewControllerWasDismissed:(CustomerCenterUIViewController * _Nonnull)controller;
- (void)customerCenterViewControllerDidStartRestore:(CustomerCenterUIViewController * _Nonnull)controller;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didFinishRestoringWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didFailRestoringWithErrorDictionary:(NSDictionary<NSString *, id> * _Nonnull)errorDictionary;
- (void)customerCenterViewControllerDidShowManageSubscriptions:(CustomerCenterUIViewController * _Nonnull)controller;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didStartRefundRequestForProductWithID:(NSString * _Nonnull)productID;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didCompleteRefundRequestForProductWithID:(NSString * _Nonnull)productId withStatus:(NSString * _Nonnull)status;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didSelectCustomerCenterManagementOption:(NSString * _Nonnull)optionID withURL:(NSString * _Nullable)url;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didCompleteFeedbackSurveyWithOptionID:(NSString * _Nonnull)optionID;
- (void)customerCenterViewController:(CustomerCenterUIViewController * _Nonnull)controller didSelectCustomAction:(NSString * _Nonnull)actionID withPurchaseIdentifier:(NSString * _Nullable)purchaseIdentifier;
@end

@class NSCoder;
@class NSBundle;
SWIFT_CLASS("_TtC23PurchasesHybridCommonUI30CustomerCenterUIViewController") SWIFT_AVAILABILITY(visionos,unavailable) SWIFT_AVAILABILITY(watchos,unavailable) SWIFT_AVAILABILITY(tvos,unavailable) SWIFT_AVAILABILITY(macos,unavailable) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface CustomerCenterUIViewController : UIViewController
/// See <code>CustomerCenterViewControllerDelegateWrapper</code> for receiving events.
@property (nonatomic, weak) id <RCCustomerCenterViewControllerDelegateWrapper> _Nullable delegate;
/// Handler for when the navigation close button is tapped
@property (nonatomic, copy) void (^ _Nullable onCloseHandler)(void);
/// Whether to show the close button in the navigation
@property (nonatomic) BOOL shouldShowCloseButton;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidDisappear:(BOOL)animated;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@protocol RCPaywallViewControllerDelegateWrapper;
@class RCPaywallViewController;
@class RCPaywallFooterViewController;
SWIFT_CLASS("_TtC23PurchasesHybridCommonUI12PaywallProxy") SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface PaywallProxy : NSObject
/// See <code>PaywallViewControllerDelegateWrapper</code> for receiving events.
@property (nonatomic, weak) id <RCPaywallViewControllerDelegateWrapper> _Nullable delegate;
- (RCPaywallViewController * _Nonnull)createPaywallView SWIFT_WARN_UNUSED_RESULT;
- (RCPaywallViewController * _Nonnull)createPaywallViewWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier presentedOfferingContext:(NSDictionary<NSString *, id> * _Nonnull)presentedOfferingContext SWIFT_WARN_UNUSED_RESULT;
- (RCPaywallFooterViewController * _Nonnull)createFooterPaywallView SWIFT_WARN_UNUSED_RESULT;
- (RCPaywallFooterViewController * _Nonnull)createFooterPaywallViewWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier presentedOfferingContext:(NSDictionary<NSString *, id> * _Nonnull)presentedOfferingContext SWIFT_WARN_UNUSED_RESULT;
- (void)presentPaywallWithOptions:(NSDictionary<NSString *, id> * _Nonnull)options paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler;
- (void)presentPaywallIfNeededWithOptions:(NSDictionary<NSString *, id> * _Nonnull)options paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtCC23PurchasesHybridCommonUI12PaywallProxy18PaywallOptionsKeys")
@interface PaywallOptionsKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull requiredEntitlementIdentifier;)
+ (NSString * _Nonnull)requiredEntitlementIdentifier SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offeringIdentifier;)
+ (NSString * _Nonnull)offeringIdentifier SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull presentedOfferingContext;)
+ (NSString * _Nonnull)presentedOfferingContext SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull displayCloseButton;)
+ (NSString * _Nonnull)displayCloseButton SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull shouldBlockTouchEvents;)
+ (NSString * _Nonnull)shouldBlockTouchEvents SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull fontName;)
+ (NSString * _Nonnull)fontName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtCC23PurchasesHybridCommonUI12PaywallProxy28PresentedOfferingContextKeys")
@interface PresentedOfferingContextKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull offeringIdentifier;)
+ (NSString * _Nonnull)offeringIdentifier SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull placementIdentifier;)
+ (NSString * _Nonnull)placementIdentifier SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull targetingContext;)
+ (NSString * _Nonnull)targetingContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtCC23PurchasesHybridCommonUI12PaywallProxy37PresentedOfferingTargetingContextKeys")
@interface PresentedOfferingTargetingContextKeys : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull revision;)
+ (NSString * _Nonnull)revision SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ruleId;)
+ (NSString * _Nonnull)ruleId SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class RCPackage;
@class RCCustomerInfo;
@class RCStoreTransaction;
@class NSError;
SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface PaywallProxy (SWIFT_EXTENSION(PurchasesHybridCommonUI)) <RCPaywallViewControllerDelegate>
- (void)paywallViewControllerDidStartPurchase:(RCPaywallViewController * _Nonnull)controller;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didStartPurchaseWithPackage:(RCPackage * _Nonnull)package;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishPurchasingWithCustomerInfo:(RCCustomerInfo * _Nonnull)customerInfo;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishPurchasingWithCustomerInfo:(RCCustomerInfo * _Nonnull)customerInfo transaction:(RCStoreTransaction * _Nullable)transaction;
- (void)paywallViewControllerDidCancelPurchase:(RCPaywallViewController * _Nonnull)controller;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFailPurchasingWithError:(NSError * _Nonnull)error;
- (void)paywallViewControllerDidStartRestore:(RCPaywallViewController * _Nonnull)controller;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishRestoringWithCustomerInfo:(RCCustomerInfo * _Nonnull)customerInfo;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFailRestoringWithError:(NSError * _Nonnull)error;
- (void)paywallViewControllerWasDismissed:(RCPaywallViewController * _Nonnull)controller;
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didChangeSizeTo:(CGSize)size;
@end

@class RCOffering;
SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface PaywallProxy (SWIFT_EXTENSION(PurchasesHybridCommonUI))
- (RCPaywallViewController * _Nonnull)createPaywallViewWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use init with offeringIdentifier:presentedOfferingContext instead");
- (RCPaywallFooterViewController * _Nonnull)createFooterPaywallViewWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("use init with offeringIdentifier:presentedOfferingContext instead");
- (void)presentPaywall SWIFT_DEPRECATED_MSG("Use presentPaywall with paywallResultHandler instead");
- (void)presentPaywallWithDisplayCloseButton:(BOOL)displayCloseButton SWIFT_DEPRECATED_MSG("Use presentPaywall with paywallResultHandler instead");
- (void)presentPaywallWithOffering:(RCOffering * _Nonnull)offering SWIFT_DEPRECATED_MSG("Use presentPaywall with paywallResultHandler instead");
- (void)presentPaywallWithOffering:(RCOffering * _Nonnull)offering displayCloseButton:(BOOL)displayCloseButton SWIFT_DEPRECATED_MSG("Use presentPaywall with paywallResultHandler instead");
- (void)presentPaywallWithPaywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallWithDisplayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallWithOffering:(RCOffering * _Nonnull)offering paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallWithOffering:(RCOffering * _Nonnull)offering displayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallWithOfferingIdentifier:(NSString * _Nonnull)offeringIdentifier displayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywall with options instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with paywallResultHandler instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier displayCloseButton:(BOOL)displayCloseButton SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with paywallResultHandler instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with options instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier displayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with options instead");
- (void)presentPaywallIfNeededWithRequiredEntitlementIdentifier:(NSString * _Nonnull)requiredEntitlementIdentifier offeringIdentifier:(NSString * _Nonnull)offeringIdentifier displayCloseButton:(BOOL)displayCloseButton paywallResultHandler:(void (^ _Nonnull)(NSString * _Nonnull))paywallResultHandler SWIFT_DEPRECATED_MSG("Use presentPaywallIfNeeded with options instead");
@end

/// Delegate for <code>PaywallViewController</code> that sends dictionaries instead of the original objects.
SWIFT_PROTOCOL_NAMED("PaywallViewControllerDelegateWrapper") SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@protocol RCPaywallViewControllerDelegateWrapper
@optional
/// Notifies that a purchase has started in a <code>PaywallViewController</code>.
- (void)paywallViewControllerDidStartPurchase:(RCPaywallViewController * _Nonnull)controller;
/// Notifies that a purchase has started in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didStartPurchaseWithPackage:(NSDictionary<NSString *, id> * _Nonnull)packageDictionary;
/// Notifies that a purchase has completed in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishPurchasingWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary;
/// Notifies that a purchase has completed in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishPurchasingWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary transactionDictionary:(NSDictionary<NSString *, id> * _Nullable)transactionDictionary;
/// Notifies that a purchase has been cancelled in a <code>PaywallViewController</code>.
- (void)paywallViewControllerDidCancelPurchase:(RCPaywallViewController * _Nonnull)controller;
/// Notifies that the purchase operation has failed in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFailPurchasingWithErrorDictionary:(NSDictionary<NSString *, id> * _Nonnull)errorDictionary;
/// Notifies that a restore has started in a <code>PaywallViewController</code>.
- (void)paywallViewControllerDidStartRestore:(RCPaywallViewController * _Nonnull)controller;
/// Notifies that the restore operation has completed in a <code>PaywallViewController</code>.
/// warning:
/// Receiving a <code>CustomerInfo</code>does not imply that the user has any entitlements,
/// simply that the process was successful. You must verify the <code>CustomerInfo/entitlements</code>
/// to confirm that they are active.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFinishRestoringWithCustomerInfoDictionary:(NSDictionary<NSString *, id> * _Nonnull)customerInfoDictionary;
/// Notifies that the restore operation has failed in a <code>PaywallViewController</code>.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didFailRestoringWithErrorDictionary:(NSDictionary<NSString *, id> * _Nonnull)errorDictionary;
/// Notifies that the <code>PaywallViewController</code> has to be dismissed.
/// <ul>
///   <li>
///     After close button is pressed if it’s present
///   </li>
///   <li>
///     After a successful purchase
///     Only called if the shouldAutomaticallyDismiss configuration option is set to false (true by default).
///   </li>
/// </ul>
- (void)paywallViewControllerRequestedDismissal:(RCPaywallViewController * _Nonnull)controller;
/// Notifies that the <code>PaywallViewController</code> was dismissed.
- (void)paywallViewControllerWasDismissed:(RCPaywallViewController * _Nonnull)controller;
/// For internal use only.
- (void)paywallViewController:(RCPaywallViewController * _Nonnull)controller didChangeSizeTo:(CGSize)size;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
