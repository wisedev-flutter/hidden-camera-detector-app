// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "ScannerApi.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

@implementation HCDPigeonScanSourceBox
- (instancetype)initWithValue:(HCDPigeonScanSource)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation HCDPigeonDeviceRiskLevelBox
- (instancetype)initWithValue:(HCDPigeonDeviceRiskLevel)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface HCDDeviceDto ()
+ (HCDDeviceDto *)fromList:(NSArray *)list;
+ (nullable HCDDeviceDto *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface HCDDeviceEventDto ()
+ (HCDDeviceEventDto *)fromList:(NSArray *)list;
+ (nullable HCDDeviceEventDto *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation HCDDeviceDto
+ (instancetype)makeWithId:(NSString *)id
    name:(NSString *)name
    source:(HCDPigeonScanSource)source
    manufacturer:(nullable NSString *)manufacturer
    ipAddress:(nullable NSString *)ipAddress
    rssi:(nullable NSNumber *)rssi
    isTrusted:(NSNumber *)isTrusted
    riskLevel:(nullable HCDPigeonDeviceRiskLevelBox *)riskLevel {
  HCDDeviceDto* pigeonResult = [[HCDDeviceDto alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.source = source;
  pigeonResult.manufacturer = manufacturer;
  pigeonResult.ipAddress = ipAddress;
  pigeonResult.rssi = rssi;
  pigeonResult.isTrusted = isTrusted;
  pigeonResult.riskLevel = riskLevel;
  return pigeonResult;
}
+ (HCDDeviceDto *)fromList:(NSArray *)list {
  HCDDeviceDto *pigeonResult = [[HCDDeviceDto alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.id != nil, @"");
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.name != nil, @"");
  pigeonResult.source = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.manufacturer = GetNullableObjectAtIndex(list, 3);
  pigeonResult.ipAddress = GetNullableObjectAtIndex(list, 4);
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 5);
  pigeonResult.isTrusted = GetNullableObjectAtIndex(list, 6);
  NSAssert(pigeonResult.isTrusted != nil, @"");
  NSNumber *riskLevelAsNumber = GetNullableObjectAtIndex(list, 7);
  HCDPigeonDeviceRiskLevelBox *riskLevel = riskLevelAsNumber == nil ? nil : [[HCDPigeonDeviceRiskLevelBox alloc] initWithValue:[riskLevelAsNumber integerValue]];
  pigeonResult.riskLevel = riskLevel;
  return pigeonResult;
}
+ (nullable HCDDeviceDto *)nullableFromList:(NSArray *)list {
  return (list) ? [HCDDeviceDto fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    (self.name ?: [NSNull null]),
    @(self.source),
    (self.manufacturer ?: [NSNull null]),
    (self.ipAddress ?: [NSNull null]),
    (self.rssi ?: [NSNull null]),
    (self.isTrusted ?: [NSNull null]),
    (self.riskLevel == nil ? [NSNull null] : [NSNumber numberWithInteger:self.riskLevel.value]),
  ];
}
@end

@implementation HCDDeviceEventDto
+ (instancetype)makeWithSource:(HCDPigeonScanSource)source
    device:(HCDDeviceDto *)device
    eventId:(NSNumber *)eventId
    totalDiscovered:(nullable NSNumber *)totalDiscovered
    isFinal:(NSNumber *)isFinal {
  HCDDeviceEventDto* pigeonResult = [[HCDDeviceEventDto alloc] init];
  pigeonResult.source = source;
  pigeonResult.device = device;
  pigeonResult.eventId = eventId;
  pigeonResult.totalDiscovered = totalDiscovered;
  pigeonResult.isFinal = isFinal;
  return pigeonResult;
}
+ (HCDDeviceEventDto *)fromList:(NSArray *)list {
  HCDDeviceEventDto *pigeonResult = [[HCDDeviceEventDto alloc] init];
  pigeonResult.source = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.device = [HCDDeviceDto nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  NSAssert(pigeonResult.device != nil, @"");
  pigeonResult.eventId = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.eventId != nil, @"");
  pigeonResult.totalDiscovered = GetNullableObjectAtIndex(list, 3);
  pigeonResult.isFinal = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.isFinal != nil, @"");
  return pigeonResult;
}
+ (nullable HCDDeviceEventDto *)nullableFromList:(NSArray *)list {
  return (list) ? [HCDDeviceEventDto fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.source),
    (self.device ? [self.device toList] : [NSNull null]),
    (self.eventId ?: [NSNull null]),
    (self.totalDiscovered ?: [NSNull null]),
    (self.isFinal ?: [NSNull null]),
  ];
}
@end

NSObject<FlutterMessageCodec> *HCDScannerHostApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void SetUpHCDScannerHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HCDScannerHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.startWifiScan"
        binaryMessenger:binaryMessenger
        codec:HCDScannerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startWifiScanWithCompletion:)], @"HCDScannerHostApi api (%@) doesn't respond to @selector(startWifiScanWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startWifiScanWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.stopWifiScan"
        binaryMessenger:binaryMessenger
        codec:HCDScannerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopWifiScanWithCompletion:)], @"HCDScannerHostApi api (%@) doesn't respond to @selector(stopWifiScanWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopWifiScanWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.startBluetoothScan"
        binaryMessenger:binaryMessenger
        codec:HCDScannerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startBluetoothScanWithCompletion:)], @"HCDScannerHostApi api (%@) doesn't respond to @selector(startBluetoothScanWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startBluetoothScanWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.stopBluetoothScan"
        binaryMessenger:binaryMessenger
        codec:HCDScannerHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopBluetoothScanWithCompletion:)], @"HCDScannerHostApi api (%@) doesn't respond to @selector(stopBluetoothScanWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopBluetoothScanWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface HCDScannerStreamApiCodecReader : FlutterStandardReader
@end
@implementation HCDScannerStreamApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [HCDDeviceDto fromList:[self readValue]];
    case 129: 
      return [HCDDeviceEventDto fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface HCDScannerStreamApiCodecWriter : FlutterStandardWriter
@end
@implementation HCDScannerStreamApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[HCDDeviceDto class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[HCDDeviceEventDto class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface HCDScannerStreamApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HCDScannerStreamApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HCDScannerStreamApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HCDScannerStreamApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HCDScannerStreamApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    HCDScannerStreamApiCodecReaderWriter *readerWriter = [[HCDScannerStreamApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface HCDScannerStreamApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation HCDScannerStreamApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onDeviceEventEvent:(HCDDeviceEventDto *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.hidden_camera_detector.ScannerStreamApi.onDeviceEvent"
      binaryMessenger:self.binaryMessenger
      codec:HCDScannerStreamApiGetCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion([FlutterError errorWithCode:@"channel-error" message:@"Unable to establish connection on channel." details:@""]);
    } 
  }];
}
@end

