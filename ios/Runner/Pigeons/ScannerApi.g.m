// Autogenerated from Pigeon (v26.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "ScannerApi.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static FlutterError *createConnectionError(NSString *channelName) {
  return [FlutterError errorWithCode:@"channel-error" message:[NSString stringWithFormat:@"%@/%@/%@", @"Unable to establish connection on channel: '", channelName, @"'."] details:@""];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation HCDScanSourceDtoBox
- (instancetype)initWithValue:(HCDScanSourceDto)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation HCDDeviceRiskLevelDtoBox
- (instancetype)initWithValue:(HCDDeviceRiskLevelDto)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@implementation HCDPermissionStatusDtoBox
- (instancetype)initWithValue:(HCDPermissionStatusDto)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface HCD_PigeonConfig ()
+ (HCD_PigeonConfig *)fromList:(NSArray<id> *)list;
+ (nullable HCD_PigeonConfig *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface HCDDeviceDto ()
+ (HCDDeviceDto *)fromList:(NSArray<id> *)list;
+ (nullable HCDDeviceDto *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface HCDDeviceEventDto ()
+ (HCDDeviceEventDto *)fromList:(NSArray<id> *)list;
+ (nullable HCDDeviceEventDto *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation HCD_PigeonConfig
+ (instancetype)makeWith {
  HCD_PigeonConfig* pigeonResult = [[HCD_PigeonConfig alloc] init];
  return pigeonResult;
}
+ (HCD_PigeonConfig *)fromList:(NSArray<id> *)list {
  HCD_PigeonConfig *pigeonResult = [[HCD_PigeonConfig alloc] init];
  return pigeonResult;
}
+ (nullable HCD_PigeonConfig *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [HCD_PigeonConfig fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
  ];
}
@end

@implementation HCDDeviceDto
+ (instancetype)makeWithId:(NSString *)id
    name:(NSString *)name
    source:(HCDScanSourceDto)source
    manufacturer:(nullable NSString *)manufacturer
    ipAddress:(nullable NSString *)ipAddress
    rssi:(nullable NSNumber *)rssi
    isTrusted:(BOOL )isTrusted
    riskLevel:(nullable HCDDeviceRiskLevelDtoBox *)riskLevel {
  HCDDeviceDto* pigeonResult = [[HCDDeviceDto alloc] init];
  pigeonResult.id = id;
  pigeonResult.name = name;
  pigeonResult.source = source;
  pigeonResult.manufacturer = manufacturer;
  pigeonResult.ipAddress = ipAddress;
  pigeonResult.rssi = rssi;
  pigeonResult.isTrusted = isTrusted;
  pigeonResult.riskLevel = riskLevel;
  return pigeonResult;
}
+ (HCDDeviceDto *)fromList:(NSArray<id> *)list {
  HCDDeviceDto *pigeonResult = [[HCDDeviceDto alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  HCDScanSourceDtoBox *boxedHCDScanSourceDto = GetNullableObjectAtIndex(list, 2);
  pigeonResult.source = boxedHCDScanSourceDto.value;
  pigeonResult.manufacturer = GetNullableObjectAtIndex(list, 3);
  pigeonResult.ipAddress = GetNullableObjectAtIndex(list, 4);
  pigeonResult.rssi = GetNullableObjectAtIndex(list, 5);
  pigeonResult.isTrusted = [GetNullableObjectAtIndex(list, 6) boolValue];
  pigeonResult.riskLevel = GetNullableObjectAtIndex(list, 7);
  return pigeonResult;
}
+ (nullable HCDDeviceDto *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [HCDDeviceDto fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.id ?: [NSNull null],
    self.name ?: [NSNull null],
    [[HCDScanSourceDtoBox alloc] initWithValue:self.source],
    self.manufacturer ?: [NSNull null],
    self.ipAddress ?: [NSNull null],
    self.rssi ?: [NSNull null],
    @(self.isTrusted),
    self.riskLevel ?: [NSNull null],
  ];
}
@end

@implementation HCDDeviceEventDto
+ (instancetype)makeWithSource:(HCDScanSourceDto)source
    device:(HCDDeviceDto *)device
    eventId:(NSInteger )eventId
    totalDiscovered:(nullable NSNumber *)totalDiscovered
    isFinal:(BOOL )isFinal {
  HCDDeviceEventDto* pigeonResult = [[HCDDeviceEventDto alloc] init];
  pigeonResult.source = source;
  pigeonResult.device = device;
  pigeonResult.eventId = eventId;
  pigeonResult.totalDiscovered = totalDiscovered;
  pigeonResult.isFinal = isFinal;
  return pigeonResult;
}
+ (HCDDeviceEventDto *)fromList:(NSArray<id> *)list {
  HCDDeviceEventDto *pigeonResult = [[HCDDeviceEventDto alloc] init];
  HCDScanSourceDtoBox *boxedHCDScanSourceDto = GetNullableObjectAtIndex(list, 0);
  pigeonResult.source = boxedHCDScanSourceDto.value;
  pigeonResult.device = GetNullableObjectAtIndex(list, 1);
  pigeonResult.eventId = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.totalDiscovered = GetNullableObjectAtIndex(list, 3);
  pigeonResult.isFinal = [GetNullableObjectAtIndex(list, 4) boolValue];
  return pigeonResult;
}
+ (nullable HCDDeviceEventDto *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [HCDDeviceEventDto fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[HCDScanSourceDtoBox alloc] initWithValue:self.source],
    self.device ?: [NSNull null],
    @(self.eventId),
    self.totalDiscovered ?: [NSNull null],
    @(self.isFinal),
  ];
}
@end

@interface HCDScannerApiPigeonCodecReader : FlutterStandardReader
@end
@implementation HCDScannerApiPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[HCDScanSourceDtoBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 130: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[HCDDeviceRiskLevelDtoBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 131: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[HCDPermissionStatusDtoBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 132: 
      return [HCD_PigeonConfig fromList:[self readValue]];
    case 133: 
      return [HCDDeviceDto fromList:[self readValue]];
    case 134: 
      return [HCDDeviceEventDto fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface HCDScannerApiPigeonCodecWriter : FlutterStandardWriter
@end
@implementation HCDScannerApiPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[HCDScanSourceDtoBox class]]) {
    HCDScanSourceDtoBox *box = (HCDScanSourceDtoBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[HCDDeviceRiskLevelDtoBox class]]) {
    HCDDeviceRiskLevelDtoBox *box = (HCDDeviceRiskLevelDtoBox *)value;
    [self writeByte:130];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[HCDPermissionStatusDtoBox class]]) {
    HCDPermissionStatusDtoBox *box = (HCDPermissionStatusDtoBox *)value;
    [self writeByte:131];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[HCD_PigeonConfig class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[HCDDeviceDto class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[HCDDeviceEventDto class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface HCDScannerApiPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation HCDScannerApiPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[HCDScannerApiPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[HCDScannerApiPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *HCDGetScannerApiCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    HCDScannerApiPigeonCodecReaderWriter *readerWriter = [[HCDScannerApiPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpHCDScannerHostApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HCDScannerHostApi> *api) {
  SetUpHCDScannerHostApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpHCDScannerHostApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<HCDScannerHostApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.requestLocalNetworkAuthorization", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:HCDGetScannerApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestLocalNetworkAuthorizationWithCompletion:)], @"HCDScannerHostApi api (%@) doesn't respond to @selector(requestLocalNetworkAuthorizationWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestLocalNetworkAuthorizationWithCompletion:^(HCDPermissionStatusDtoBox *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.startWifiScan", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:HCDGetScannerApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startWifiScanWithCompletion:)], @"HCDScannerHostApi api (%@) doesn't respond to @selector(startWifiScanWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startWifiScanWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.stopWifiScan", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:HCDGetScannerApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopWifiScanWithCompletion:)], @"HCDScannerHostApi api (%@) doesn't respond to @selector(stopWifiScanWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopWifiScanWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.startBluetoothScan", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:HCDGetScannerApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startBluetoothScanWithCompletion:)], @"HCDScannerHostApi api (%@) doesn't respond to @selector(startBluetoothScanWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api startBluetoothScanWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.stopBluetoothScan", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:HCDGetScannerApiCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopBluetoothScanWithCompletion:)], @"HCDScannerHostApi api (%@) doesn't respond to @selector(stopBluetoothScanWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api stopBluetoothScanWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface HCDScannerStreamApi ()
@property(nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@property(nonatomic, strong) NSString *messageChannelSuffix;
@end

@implementation HCDScannerStreamApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  return [self initWithBinaryMessenger:binaryMessenger messageChannelSuffix:@""];
}
- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger messageChannelSuffix:(nullable NSString*)messageChannelSuffix{
  self = [self init];
  if (self) {
    _binaryMessenger = binaryMessenger;
    _messageChannelSuffix = [messageChannelSuffix length] == 0 ? @"" : [NSString stringWithFormat: @".%@", messageChannelSuffix];
  }
  return self;
}
- (void)onDeviceEventEvent:(HCDDeviceEventDto *)arg_event completion:(void (^)(FlutterError *_Nullable))completion {
  NSString *channelName = [NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.hidden_camera_detector.ScannerStreamApi.onDeviceEvent", _messageChannelSuffix];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:channelName
      binaryMessenger:self.binaryMessenger
      codec:HCDGetScannerApiCodec()];
  [channel sendMessage:@[arg_event ?: [NSNull null]] reply:^(NSArray<id> *reply) {
    if (reply != nil) {
      if (reply.count > 1) {
        completion([FlutterError errorWithCode:reply[0] message:reply[1] details:reply[2]]);
      } else {
        completion(nil);
      }
    } else {
      completion(createConnectionError(channelName));
    } 
  }];
}
@end

