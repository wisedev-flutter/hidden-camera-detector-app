// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum PigeonScanSource {
  wifi,
  bluetooth,
}

enum PigeonDeviceRiskLevel {
  low,
  medium,
  high,
  unknown,
}

/// Mirrors the Flutter `DetectedDevice` entity. Field documentation ensures a
/// predictable conversion between native JSON/dictionary payloads and the Dart
/// domain model:
/// - `id`: MAC address or UUID string.
/// - `name`: Human-readable device name (default to "Unknown Device").
/// - `source`: Originating scan type; used to route updates in Dart.
/// - `manufacturer`: Optional manufacturer string.
/// - `ipAddress`: Optional IPv4/IPv6 string for Wi-Fi devices.
/// - `rssi`: Received signal strength in dBm (Bluetooth only).
/// - `isTrusted`: Whether the device is user-whitelisted.
/// - `riskLevel`: Maps to `DeviceRiskLevel` enum.
class DeviceDto {
  DeviceDto({
    required this.id,
    required this.name,
    required this.source,
    this.manufacturer,
    this.ipAddress,
    this.rssi,
    required this.isTrusted,
    this.riskLevel,
  });

  String id;

  String name;

  PigeonScanSource source;

  String? manufacturer;

  String? ipAddress;

  int? rssi;

  bool isTrusted;

  PigeonDeviceRiskLevel? riskLevel;

  Object encode() {
    return <Object?>[
      id,
      name,
      source.index,
      manufacturer,
      ipAddress,
      rssi,
      isTrusted,
      riskLevel?.index,
    ];
  }

  static DeviceDto decode(Object result) {
    result as List<Object?>;
    return DeviceDto(
      id: result[0]! as String,
      name: result[1]! as String,
      source: PigeonScanSource.values[result[2]! as int],
      manufacturer: result[3] as String?,
      ipAddress: result[4] as String?,
      rssi: result[5] as int?,
      isTrusted: result[6]! as bool,
      riskLevel: result[7] != null
          ? PigeonDeviceRiskLevel.values[result[7]! as int]
          : null,
    );
  }
}

/// Streaming payload delivered from native scanners. Every event represents a
/// single discovery update so the Dart layer can surface incremental results.
/// `eventId` is a monotonically increasing identifier per scan to help debounce
/// duplicates; `totalDiscovered` tracks the best-effort count emitted so far.
class DeviceEventDto {
  DeviceEventDto({
    required this.source,
    required this.device,
    required this.eventId,
    this.totalDiscovered,
    required this.isFinal,
  });

  PigeonScanSource source;

  DeviceDto device;

  int eventId;

  int? totalDiscovered;

  bool isFinal;

  Object encode() {
    return <Object?>[
      source.index,
      device.encode(),
      eventId,
      totalDiscovered,
      isFinal,
    ];
  }

  static DeviceEventDto decode(Object result) {
    result as List<Object?>;
    return DeviceEventDto(
      source: PigeonScanSource.values[result[0]! as int],
      device: DeviceDto.decode(result[1]! as List<Object?>),
      eventId: result[2]! as int,
      totalDiscovered: result[3] as int?,
      isFinal: result[4]! as bool,
    );
  }
}

class ScannerHostApi {
  /// Constructor for [ScannerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ScannerHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> startWifiScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.startWifiScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopWifiScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.stopWifiScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startBluetoothScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.startBluetoothScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopBluetoothScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.stopBluetoothScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _ScannerStreamApiCodec extends StandardMessageCodec {
  const _ScannerStreamApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DeviceDto) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is DeviceEventDto) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return DeviceDto.decode(readValue(buffer)!);
      case 129: 
        return DeviceEventDto.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class ScannerStreamApi {
  static const MessageCodec<Object?> codec = _ScannerStreamApiCodec();

  void onDeviceEvent(DeviceEventDto event);

  static void setup(ScannerStreamApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.hidden_camera_detector.ScannerStreamApi.onDeviceEvent', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.hidden_camera_detector.ScannerStreamApi.onDeviceEvent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final DeviceEventDto? arg_event = (args[0] as DeviceEventDto?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.hidden_camera_detector.ScannerStreamApi.onDeviceEvent was null, expected non-null DeviceEventDto.');
          try {
            api.onDeviceEvent(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
