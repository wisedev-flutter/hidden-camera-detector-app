// Autogenerated from Pigeon (v26.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers, unused_element

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


enum ScanSourceDto {
  wifi,
  bluetooth,
}

enum DeviceRiskLevelDto {
  low,
  medium,
  high,
  unknown,
}

enum PermissionStatusDto {
  granted,
  denied,
  permanentlyDenied,
}

class _PigeonConfig {
}

/// Mirrors the Flutter `DetectedDevice` entity. Field documentation ensures a
/// predictable conversion between native JSON/dictionary payloads and the Dart
/// domain model:
/// - `id`: MAC address or UUID string.
/// - `name`: Human-readable device name (default to "Unknown Device").
/// - `source`: Originating scan type; used to route updates in Dart.
/// - `manufacturer`: Optional manufacturer string.
/// - `ipAddress`: Optional IPv4/IPv6 string for Wi-Fi devices.
/// - `rssi`: Received signal strength in dBm (Bluetooth only).
/// - `isTrusted`: Whether the device is user-whitelisted.
/// - `riskLevel`: Maps to `DeviceRiskLevel` enum.
class DeviceDto {
  DeviceDto({
    required this.id,
    required this.name,
    required this.source,
    this.manufacturer,
    this.ipAddress,
    this.rssi,
    this.isTrusted = false,
    this.riskLevel,
  });

  String id;

  String name;

  ScanSourceDto source;

  String? manufacturer;

  String? ipAddress;

  int? rssi;

  bool isTrusted;

  DeviceRiskLevelDto? riskLevel;

  List<Object?> _toList() {
    return <Object?>[
      id,
      name,
      source,
      manufacturer,
      ipAddress,
      rssi,
      isTrusted,
      riskLevel,
    ];
  }

  Object encode() {
    return _toList();  }

  static DeviceDto decode(Object result) {
    result as List<Object?>;
    return DeviceDto(
      id: result[0]! as String,
      name: result[1]! as String,
      source: result[2]! as ScanSourceDto,
      manufacturer: result[3] as String?,
      ipAddress: result[4] as String?,
      rssi: result[5] as int?,
      isTrusted: result[6]! as bool,
      riskLevel: result[7] as DeviceRiskLevelDto?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! DeviceDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

/// Streaming payload delivered from native scanners. Every event represents a
/// single discovery update so the Dart layer can surface incremental results.
/// `eventId` is a monotonically increasing identifier per scan to help debounce
/// duplicates; `totalDiscovered` tracks the best-effort count emitted so far.
class DeviceEventDto {
  DeviceEventDto({
    required this.source,
    required this.device,
    required this.eventId,
    this.totalDiscovered,
    this.isFinal = false,
  });

  ScanSourceDto source;

  DeviceDto device;

  int eventId;

  int? totalDiscovered;

  bool isFinal;

  List<Object?> _toList() {
    return <Object?>[
      source,
      device,
      eventId,
      totalDiscovered,
      isFinal,
    ];
  }

  Object encode() {
    return _toList();  }

  static DeviceEventDto decode(Object result) {
    result as List<Object?>;
    return DeviceEventDto(
      source: result[0]! as ScanSourceDto,
      device: result[1]! as DeviceDto,
      eventId: result[2]! as int,
      totalDiscovered: result[3] as int?,
      isFinal: result[4]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! DeviceEventDto || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is ScanSourceDto) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is DeviceRiskLevelDto) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is PermissionStatusDto) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is DeviceDto) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is DeviceEventDto) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ScanSourceDto.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : DeviceRiskLevelDto.values[value];
      case 131:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PermissionStatusDto.values[value];
      case 132:
        return DeviceDto.decode(readValue(buffer)!);
      case 133:
        return DeviceEventDto.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ScannerHostApi {
  /// Constructor for [ScannerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ScannerHostApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<PermissionStatusDto> requestLocalNetworkAuthorization() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.requestLocalNetworkAuthorization$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PermissionStatusDto?)!;
    }
  }

  Future<void> startWifiScan() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.startWifiScan$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopWifiScan() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.stopWifiScan$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startBluetoothScan() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.startBluetoothScan$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopBluetoothScan() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.hidden_camera_detector.ScannerHostApi.stopBluetoothScan$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class ScannerStreamApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onDeviceEvent(DeviceEventDto event);

  static void setUp(ScannerStreamApi? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.hidden_camera_detector.ScannerStreamApi.onDeviceEvent$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.hidden_camera_detector.ScannerStreamApi.onDeviceEvent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final DeviceEventDto? arg_event = (args[0] as DeviceEventDto?);
          assert(arg_event != null,
              'Argument for dev.flutter.pigeon.hidden_camera_detector.ScannerStreamApi.onDeviceEvent was null, expected non-null DeviceEventDto.');
          try {
            api.onDeviceEvent(arg_event!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
